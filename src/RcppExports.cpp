// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ovreplace
arma::mat ovreplace(arma::vec allst321, arma::vec idx321old, arma::vec idx321new, arma::vec convtype, arma::vec eststag3, arma::vec gvnrate, arma::vec multipl);
RcppExport SEXP _lefko3_ovreplace(SEXP allst321SEXP, SEXP idx321oldSEXP, SEXP idx321newSEXP, SEXP convtypeSEXP, SEXP eststag3SEXP, SEXP gvnrateSEXP, SEXP multiplSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type allst321(allst321SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx321old(idx321oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type idx321new(idx321newSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type convtype(convtypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eststag3(eststag3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gvnrate(gvnrateSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type multipl(multiplSEXP);
    rcpp_result_gen = Rcpp::wrap(ovreplace(allst321, idx321old, idx321new, convtype, eststag3, gvnrate, multipl));
    return rcpp_result_gen;
END_RCPP
}
// pfj
Rcpp::List pfj(DataFrame data, DataFrame stageframe, int noyears, int firstyear, int popidcol, int patchidcol, int individcol, int blocksize, arma::ivec xcol, arma::ivec ycol, arma::ivec juvcol, arma::ivec sizeacol, arma::ivec sizebcol, arma::ivec sizeccol, arma::ivec repstracol, arma::ivec repstrbcol, arma::ivec fecacol, arma::ivec fecbcol, arma::ivec indcovacol, arma::ivec indcovbcol, arma::ivec indcovccol, arma::ivec aliveacol, arma::ivec deadacol, arma::ivec obsacol, arma::ivec nonobsacol, arma::ivec censorcol, arma::ivec stagecol, double repstrrel, double fecrel, bool NAas0, bool NRasRep, bool RepasObs, bool stassign, int stszcol, double censorkeep, bool censbool, bool censrepeat, bool coordsrepeat);
RcppExport SEXP _lefko3_pfj(SEXP dataSEXP, SEXP stageframeSEXP, SEXP noyearsSEXP, SEXP firstyearSEXP, SEXP popidcolSEXP, SEXP patchidcolSEXP, SEXP individcolSEXP, SEXP blocksizeSEXP, SEXP xcolSEXP, SEXP ycolSEXP, SEXP juvcolSEXP, SEXP sizeacolSEXP, SEXP sizebcolSEXP, SEXP sizeccolSEXP, SEXP repstracolSEXP, SEXP repstrbcolSEXP, SEXP fecacolSEXP, SEXP fecbcolSEXP, SEXP indcovacolSEXP, SEXP indcovbcolSEXP, SEXP indcovccolSEXP, SEXP aliveacolSEXP, SEXP deadacolSEXP, SEXP obsacolSEXP, SEXP nonobsacolSEXP, SEXP censorcolSEXP, SEXP stagecolSEXP, SEXP repstrrelSEXP, SEXP fecrelSEXP, SEXP NAas0SEXP, SEXP NRasRepSEXP, SEXP RepasObsSEXP, SEXP stassignSEXP, SEXP stszcolSEXP, SEXP censorkeepSEXP, SEXP censboolSEXP, SEXP censrepeatSEXP, SEXP coordsrepeatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type stageframe(stageframeSEXP);
    Rcpp::traits::input_parameter< int >::type noyears(noyearsSEXP);
    Rcpp::traits::input_parameter< int >::type firstyear(firstyearSEXP);
    Rcpp::traits::input_parameter< int >::type popidcol(popidcolSEXP);
    Rcpp::traits::input_parameter< int >::type patchidcol(patchidcolSEXP);
    Rcpp::traits::input_parameter< int >::type individcol(individcolSEXP);
    Rcpp::traits::input_parameter< int >::type blocksize(blocksizeSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type xcol(xcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type ycol(ycolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type juvcol(juvcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type sizeacol(sizeacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type sizebcol(sizebcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type sizeccol(sizeccolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type repstracol(repstracolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type repstrbcol(repstrbcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type fecacol(fecacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type fecbcol(fecbcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type indcovacol(indcovacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type indcovbcol(indcovbcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type indcovccol(indcovccolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type aliveacol(aliveacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type deadacol(deadacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type obsacol(obsacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type nonobsacol(nonobsacolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type censorcol(censorcolSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type stagecol(stagecolSEXP);
    Rcpp::traits::input_parameter< double >::type repstrrel(repstrrelSEXP);
    Rcpp::traits::input_parameter< double >::type fecrel(fecrelSEXP);
    Rcpp::traits::input_parameter< bool >::type NAas0(NAas0SEXP);
    Rcpp::traits::input_parameter< bool >::type NRasRep(NRasRepSEXP);
    Rcpp::traits::input_parameter< bool >::type RepasObs(RepasObsSEXP);
    Rcpp::traits::input_parameter< bool >::type stassign(stassignSEXP);
    Rcpp::traits::input_parameter< int >::type stszcol(stszcolSEXP);
    Rcpp::traits::input_parameter< double >::type censorkeep(censorkeepSEXP);
    Rcpp::traits::input_parameter< bool >::type censbool(censboolSEXP);
    Rcpp::traits::input_parameter< bool >::type censrepeat(censrepeatSEXP);
    Rcpp::traits::input_parameter< bool >::type coordsrepeat(coordsrepeatSEXP);
    rcpp_result_gen = Rcpp::wrap(pfj(data, stageframe, noyears, firstyear, popidcol, patchidcol, individcol, blocksize, xcol, ycol, juvcol, sizeacol, sizebcol, sizeccol, repstracol, repstrbcol, fecacol, fecbcol, indcovacol, indcovbcol, indcovccol, aliveacol, deadacol, obsacol, nonobsacol, censorcol, stagecol, repstrrel, fecrel, NAas0, NRasRep, RepasObs, stassign, stszcol, censorkeep, censbool, censrepeat, coordsrepeat));
    return rcpp_result_gen;
END_RCPP
}
// jpf
Rcpp::List jpf(DataFrame data, DataFrame stageframe, int popidcol, int patchidcol, int individcol, int year2col, int year3col, int xcol, int ycol, int juv2col, int juv3col, int sizea2col, int sizea3col, int sizeb2col, int sizeb3col, int sizec2col, int sizec3col, int repstra2col, int repstra3col, int repstrb2col, int repstrb3col, int feca2col, int feca3col, int fecb2col, int fecb3col, int indcova2col, int indcova3col, int indcovb2col, int indcovb3col, int indcovc2col, int indcovc3col, int alive2col, int alive3col, int dead2col, int dead3col, int obs2col, int obs3col, int nonobs2col, int nonobs3col, double repstrrel, double fecrel, int stage2col, int stage3col, int censorcol, bool NAas0, bool NRasRep, bool stassign, int stszcol, double censorkeep, bool censbool);
RcppExport SEXP _lefko3_jpf(SEXP dataSEXP, SEXP stageframeSEXP, SEXP popidcolSEXP, SEXP patchidcolSEXP, SEXP individcolSEXP, SEXP year2colSEXP, SEXP year3colSEXP, SEXP xcolSEXP, SEXP ycolSEXP, SEXP juv2colSEXP, SEXP juv3colSEXP, SEXP sizea2colSEXP, SEXP sizea3colSEXP, SEXP sizeb2colSEXP, SEXP sizeb3colSEXP, SEXP sizec2colSEXP, SEXP sizec3colSEXP, SEXP repstra2colSEXP, SEXP repstra3colSEXP, SEXP repstrb2colSEXP, SEXP repstrb3colSEXP, SEXP feca2colSEXP, SEXP feca3colSEXP, SEXP fecb2colSEXP, SEXP fecb3colSEXP, SEXP indcova2colSEXP, SEXP indcova3colSEXP, SEXP indcovb2colSEXP, SEXP indcovb3colSEXP, SEXP indcovc2colSEXP, SEXP indcovc3colSEXP, SEXP alive2colSEXP, SEXP alive3colSEXP, SEXP dead2colSEXP, SEXP dead3colSEXP, SEXP obs2colSEXP, SEXP obs3colSEXP, SEXP nonobs2colSEXP, SEXP nonobs3colSEXP, SEXP repstrrelSEXP, SEXP fecrelSEXP, SEXP stage2colSEXP, SEXP stage3colSEXP, SEXP censorcolSEXP, SEXP NAas0SEXP, SEXP NRasRepSEXP, SEXP stassignSEXP, SEXP stszcolSEXP, SEXP censorkeepSEXP, SEXP censboolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type stageframe(stageframeSEXP);
    Rcpp::traits::input_parameter< int >::type popidcol(popidcolSEXP);
    Rcpp::traits::input_parameter< int >::type patchidcol(patchidcolSEXP);
    Rcpp::traits::input_parameter< int >::type individcol(individcolSEXP);
    Rcpp::traits::input_parameter< int >::type year2col(year2colSEXP);
    Rcpp::traits::input_parameter< int >::type year3col(year3colSEXP);
    Rcpp::traits::input_parameter< int >::type xcol(xcolSEXP);
    Rcpp::traits::input_parameter< int >::type ycol(ycolSEXP);
    Rcpp::traits::input_parameter< int >::type juv2col(juv2colSEXP);
    Rcpp::traits::input_parameter< int >::type juv3col(juv3colSEXP);
    Rcpp::traits::input_parameter< int >::type sizea2col(sizea2colSEXP);
    Rcpp::traits::input_parameter< int >::type sizea3col(sizea3colSEXP);
    Rcpp::traits::input_parameter< int >::type sizeb2col(sizeb2colSEXP);
    Rcpp::traits::input_parameter< int >::type sizeb3col(sizeb3colSEXP);
    Rcpp::traits::input_parameter< int >::type sizec2col(sizec2colSEXP);
    Rcpp::traits::input_parameter< int >::type sizec3col(sizec3colSEXP);
    Rcpp::traits::input_parameter< int >::type repstra2col(repstra2colSEXP);
    Rcpp::traits::input_parameter< int >::type repstra3col(repstra3colSEXP);
    Rcpp::traits::input_parameter< int >::type repstrb2col(repstrb2colSEXP);
    Rcpp::traits::input_parameter< int >::type repstrb3col(repstrb3colSEXP);
    Rcpp::traits::input_parameter< int >::type feca2col(feca2colSEXP);
    Rcpp::traits::input_parameter< int >::type feca3col(feca3colSEXP);
    Rcpp::traits::input_parameter< int >::type fecb2col(fecb2colSEXP);
    Rcpp::traits::input_parameter< int >::type fecb3col(fecb3colSEXP);
    Rcpp::traits::input_parameter< int >::type indcova2col(indcova2colSEXP);
    Rcpp::traits::input_parameter< int >::type indcova3col(indcova3colSEXP);
    Rcpp::traits::input_parameter< int >::type indcovb2col(indcovb2colSEXP);
    Rcpp::traits::input_parameter< int >::type indcovb3col(indcovb3colSEXP);
    Rcpp::traits::input_parameter< int >::type indcovc2col(indcovc2colSEXP);
    Rcpp::traits::input_parameter< int >::type indcovc3col(indcovc3colSEXP);
    Rcpp::traits::input_parameter< int >::type alive2col(alive2colSEXP);
    Rcpp::traits::input_parameter< int >::type alive3col(alive3colSEXP);
    Rcpp::traits::input_parameter< int >::type dead2col(dead2colSEXP);
    Rcpp::traits::input_parameter< int >::type dead3col(dead3colSEXP);
    Rcpp::traits::input_parameter< int >::type obs2col(obs2colSEXP);
    Rcpp::traits::input_parameter< int >::type obs3col(obs3colSEXP);
    Rcpp::traits::input_parameter< int >::type nonobs2col(nonobs2colSEXP);
    Rcpp::traits::input_parameter< int >::type nonobs3col(nonobs3colSEXP);
    Rcpp::traits::input_parameter< double >::type repstrrel(repstrrelSEXP);
    Rcpp::traits::input_parameter< double >::type fecrel(fecrelSEXP);
    Rcpp::traits::input_parameter< int >::type stage2col(stage2colSEXP);
    Rcpp::traits::input_parameter< int >::type stage3col(stage3colSEXP);
    Rcpp::traits::input_parameter< int >::type censorcol(censorcolSEXP);
    Rcpp::traits::input_parameter< bool >::type NAas0(NAas0SEXP);
    Rcpp::traits::input_parameter< bool >::type NRasRep(NRasRepSEXP);
    Rcpp::traits::input_parameter< bool >::type stassign(stassignSEXP);
    Rcpp::traits::input_parameter< int >::type stszcol(stszcolSEXP);
    Rcpp::traits::input_parameter< double >::type censorkeep(censorkeepSEXP);
    Rcpp::traits::input_parameter< bool >::type censbool(censboolSEXP);
    rcpp_result_gen = Rcpp::wrap(jpf(data, stageframe, popidcol, patchidcol, individcol, year2col, year3col, xcol, ycol, juv2col, juv3col, sizea2col, sizea3col, sizeb2col, sizeb3col, sizec2col, sizec3col, repstra2col, repstra3col, repstrb2col, repstrb3col, feca2col, feca3col, fecb2col, fecb3col, indcova2col, indcova3col, indcovb2col, indcovb3col, indcovc2col, indcovc3col, alive2col, alive3col, dead2col, dead3col, obs2col, obs3col, nonobs2col, nonobs3col, repstrrel, fecrel, stage2col, stage3col, censorcol, NAas0, NRasRep, stassign, stszcol, censorkeep, censbool));
    return rcpp_result_gen;
END_RCPP
}
// theoldpizzle
Rcpp::List theoldpizzle(DataFrame StageFrame, DataFrame OverWrite, arma::mat repmatrix, int finalage, int format, int style, int cont);
RcppExport SEXP _lefko3_theoldpizzle(SEXP StageFrameSEXP, SEXP OverWriteSEXP, SEXP repmatrixSEXP, SEXP finalageSEXP, SEXP formatSEXP, SEXP styleSEXP, SEXP contSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type StageFrame(StageFrameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type OverWrite(OverWriteSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type repmatrix(repmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type finalage(finalageSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< int >::type style(styleSEXP);
    Rcpp::traits::input_parameter< int >::type cont(contSEXP);
    rcpp_result_gen = Rcpp::wrap(theoldpizzle(StageFrame, OverWrite, repmatrix, finalage, format, style, cont));
    return rcpp_result_gen;
END_RCPP
}
// hoffmannofstuttgart
List hoffmannofstuttgart(arma::mat mainmat, DataFrame indices, int ahstages, StringVector stagenames);
RcppExport SEXP _lefko3_hoffmannofstuttgart(SEXP mainmatSEXP, SEXP indicesSEXP, SEXP ahstagesSEXP, SEXP stagenamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mainmat(mainmatSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int >::type ahstages(ahstagesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type stagenames(stagenamesSEXP);
    rcpp_result_gen = Rcpp::wrap(hoffmannofstuttgart(mainmat, indices, ahstages, stagenames));
    return rcpp_result_gen;
END_RCPP
}
// cond_hmpm
Rcpp::List cond_hmpm(List hmpm, Nullable<CharacterVector> matchoice, Nullable<LogicalVector> err_check);
RcppExport SEXP _lefko3_cond_hmpm(SEXP hmpmSEXP, SEXP matchoiceSEXP, SEXP err_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hmpm(hmpmSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type matchoice(matchoiceSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type err_check(err_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(cond_hmpm(hmpm, matchoice, err_check));
    return rcpp_result_gen;
END_RCPP
}
// specialpatrolgroup
List specialpatrolgroup(DataFrame sge9l, DataFrame sge3, DataFrame MainData, DataFrame StageFrame, int format, int err_switch);
RcppExport SEXP _lefko3_specialpatrolgroup(SEXP sge9lSEXP, SEXP sge3SEXP, SEXP MainDataSEXP, SEXP StageFrameSEXP, SEXP formatSEXP, SEXP err_switchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type sge9l(sge9lSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type sge3(sge3SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type MainData(MainDataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type StageFrame(StageFrameSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< int >::type err_switch(err_switchSEXP);
    rcpp_result_gen = Rcpp::wrap(specialpatrolgroup(sge9l, sge3, MainData, StageFrame, format, err_switch));
    return rcpp_result_gen;
END_RCPP
}
// normalpatrolgroup
List normalpatrolgroup(DataFrame sge3, DataFrame sge2, DataFrame MainData, DataFrame StageFrame);
RcppExport SEXP _lefko3_normalpatrolgroup(SEXP sge3SEXP, SEXP sge2SEXP, SEXP MainDataSEXP, SEXP StageFrameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type sge3(sge3SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type sge2(sge2SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type MainData(MainDataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type StageFrame(StageFrameSEXP);
    rcpp_result_gen = Rcpp::wrap(normalpatrolgroup(sge3, sge2, MainData, StageFrame));
    return rcpp_result_gen;
END_RCPP
}
// jerzeibalowski
List jerzeibalowski(DataFrame ppy, DataFrame AllStages, DataFrame stageframe, int matrixformat, List survproxy, List obsproxy, List sizeproxy, List repstproxy, List fecproxy, List jsurvproxy, List jobsproxy, List jsizeproxy, List jrepstproxy, double inda, double indb, double indc, double survdev, double obsdev, double sizedev, double repstdev, double fecdev, double jsurvdev, double jobsdev, double jsizedev, double jrepstdev, double fecmod, double summedvars, double sigma, double jsummedvars, double jsigma, double maxsize, unsigned int finalage, int sizedist, int fecdist, bool negfec);
RcppExport SEXP _lefko3_jerzeibalowski(SEXP ppySEXP, SEXP AllStagesSEXP, SEXP stageframeSEXP, SEXP matrixformatSEXP, SEXP survproxySEXP, SEXP obsproxySEXP, SEXP sizeproxySEXP, SEXP repstproxySEXP, SEXP fecproxySEXP, SEXP jsurvproxySEXP, SEXP jobsproxySEXP, SEXP jsizeproxySEXP, SEXP jrepstproxySEXP, SEXP indaSEXP, SEXP indbSEXP, SEXP indcSEXP, SEXP survdevSEXP, SEXP obsdevSEXP, SEXP sizedevSEXP, SEXP repstdevSEXP, SEXP fecdevSEXP, SEXP jsurvdevSEXP, SEXP jobsdevSEXP, SEXP jsizedevSEXP, SEXP jrepstdevSEXP, SEXP fecmodSEXP, SEXP summedvarsSEXP, SEXP sigmaSEXP, SEXP jsummedvarsSEXP, SEXP jsigmaSEXP, SEXP maxsizeSEXP, SEXP finalageSEXP, SEXP sizedistSEXP, SEXP fecdistSEXP, SEXP negfecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type ppy(ppySEXP);
    Rcpp::traits::input_parameter< DataFrame >::type AllStages(AllStagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type stageframe(stageframeSEXP);
    Rcpp::traits::input_parameter< int >::type matrixformat(matrixformatSEXP);
    Rcpp::traits::input_parameter< List >::type survproxy(survproxySEXP);
    Rcpp::traits::input_parameter< List >::type obsproxy(obsproxySEXP);
    Rcpp::traits::input_parameter< List >::type sizeproxy(sizeproxySEXP);
    Rcpp::traits::input_parameter< List >::type repstproxy(repstproxySEXP);
    Rcpp::traits::input_parameter< List >::type fecproxy(fecproxySEXP);
    Rcpp::traits::input_parameter< List >::type jsurvproxy(jsurvproxySEXP);
    Rcpp::traits::input_parameter< List >::type jobsproxy(jobsproxySEXP);
    Rcpp::traits::input_parameter< List >::type jsizeproxy(jsizeproxySEXP);
    Rcpp::traits::input_parameter< List >::type jrepstproxy(jrepstproxySEXP);
    Rcpp::traits::input_parameter< double >::type inda(indaSEXP);
    Rcpp::traits::input_parameter< double >::type indb(indbSEXP);
    Rcpp::traits::input_parameter< double >::type indc(indcSEXP);
    Rcpp::traits::input_parameter< double >::type survdev(survdevSEXP);
    Rcpp::traits::input_parameter< double >::type obsdev(obsdevSEXP);
    Rcpp::traits::input_parameter< double >::type sizedev(sizedevSEXP);
    Rcpp::traits::input_parameter< double >::type repstdev(repstdevSEXP);
    Rcpp::traits::input_parameter< double >::type fecdev(fecdevSEXP);
    Rcpp::traits::input_parameter< double >::type jsurvdev(jsurvdevSEXP);
    Rcpp::traits::input_parameter< double >::type jobsdev(jobsdevSEXP);
    Rcpp::traits::input_parameter< double >::type jsizedev(jsizedevSEXP);
    Rcpp::traits::input_parameter< double >::type jrepstdev(jrepstdevSEXP);
    Rcpp::traits::input_parameter< double >::type fecmod(fecmodSEXP);
    Rcpp::traits::input_parameter< double >::type summedvars(summedvarsSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type jsummedvars(jsummedvarsSEXP);
    Rcpp::traits::input_parameter< double >::type jsigma(jsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type maxsize(maxsizeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type finalage(finalageSEXP);
    Rcpp::traits::input_parameter< int >::type sizedist(sizedistSEXP);
    Rcpp::traits::input_parameter< int >::type fecdist(fecdistSEXP);
    Rcpp::traits::input_parameter< bool >::type negfec(negfecSEXP);
    rcpp_result_gen = Rcpp::wrap(jerzeibalowski(ppy, AllStages, stageframe, matrixformat, survproxy, obsproxy, sizeproxy, repstproxy, fecproxy, jsurvproxy, jobsproxy, jsizeproxy, jrepstproxy, inda, indb, indc, survdev, obsdev, sizedev, repstdev, fecdev, jsurvdev, jobsdev, jsizedev, jrepstdev, fecmod, summedvars, sigma, jsummedvars, jsigma, maxsize, finalage, sizedist, fecdist, negfec));
    return rcpp_result_gen;
END_RCPP
}
// stovokor
List stovokor(StringVector surv, StringVector obs, StringVector size, StringVector repst, StringVector fec, StringVector vitalrates, bool historical, String suite, String approach, String sizedist, String fecdist, bool nojuvs, String age, StringVector indcova, StringVector indcovb, StringVector indcovc, String indiv, String patch, String year, bool pasrand, bool yasrand, int fectime, bool juvsize, bool size0, bool fec0);
RcppExport SEXP _lefko3_stovokor(SEXP survSEXP, SEXP obsSEXP, SEXP sizeSEXP, SEXP repstSEXP, SEXP fecSEXP, SEXP vitalratesSEXP, SEXP historicalSEXP, SEXP suiteSEXP, SEXP approachSEXP, SEXP sizedistSEXP, SEXP fecdistSEXP, SEXP nojuvsSEXP, SEXP ageSEXP, SEXP indcovaSEXP, SEXP indcovbSEXP, SEXP indcovcSEXP, SEXP indivSEXP, SEXP patchSEXP, SEXP yearSEXP, SEXP pasrandSEXP, SEXP yasrandSEXP, SEXP fectimeSEXP, SEXP juvsizeSEXP, SEXP size0SEXP, SEXP fec0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type surv(survSEXP);
    Rcpp::traits::input_parameter< StringVector >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type repst(repstSEXP);
    Rcpp::traits::input_parameter< StringVector >::type fec(fecSEXP);
    Rcpp::traits::input_parameter< StringVector >::type vitalrates(vitalratesSEXP);
    Rcpp::traits::input_parameter< bool >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< String >::type suite(suiteSEXP);
    Rcpp::traits::input_parameter< String >::type approach(approachSEXP);
    Rcpp::traits::input_parameter< String >::type sizedist(sizedistSEXP);
    Rcpp::traits::input_parameter< String >::type fecdist(fecdistSEXP);
    Rcpp::traits::input_parameter< bool >::type nojuvs(nojuvsSEXP);
    Rcpp::traits::input_parameter< String >::type age(ageSEXP);
    Rcpp::traits::input_parameter< StringVector >::type indcova(indcovaSEXP);
    Rcpp::traits::input_parameter< StringVector >::type indcovb(indcovbSEXP);
    Rcpp::traits::input_parameter< StringVector >::type indcovc(indcovcSEXP);
    Rcpp::traits::input_parameter< String >::type indiv(indivSEXP);
    Rcpp::traits::input_parameter< String >::type patch(patchSEXP);
    Rcpp::traits::input_parameter< String >::type year(yearSEXP);
    Rcpp::traits::input_parameter< bool >::type pasrand(pasrandSEXP);
    Rcpp::traits::input_parameter< bool >::type yasrand(yasrandSEXP);
    Rcpp::traits::input_parameter< int >::type fectime(fectimeSEXP);
    Rcpp::traits::input_parameter< bool >::type juvsize(juvsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type size0(size0SEXP);
    Rcpp::traits::input_parameter< bool >::type fec0(fec0SEXP);
    rcpp_result_gen = Rcpp::wrap(stovokor(surv, obs, size, repst, fec, vitalrates, historical, suite, approach, sizedist, fecdist, nojuvs, age, indcova, indcovb, indcovc, indiv, patch, year, pasrand, yasrand, fectime, juvsize, size0, fec0));
    return rcpp_result_gen;
END_RCPP
}
// flagrantcrap
arma::vec flagrantcrap(arma::mat Xmat, arma::uvec allindices);
RcppExport SEXP _lefko3_flagrantcrap(SEXP XmatSEXP, SEXP allindicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type allindices(allindicesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagrantcrap(Xmat, allindices));
    return rcpp_result_gen;
END_RCPP
}
// moreflagrantcrap
arma::vec moreflagrantcrap(arma::mat Xmat);
RcppExport SEXP _lefko3_moreflagrantcrap(SEXP XmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xmat(XmatSEXP);
    rcpp_result_gen = Rcpp::wrap(moreflagrantcrap(Xmat));
    return rcpp_result_gen;
END_RCPP
}
// spmat_log
arma::sp_mat spmat_log(arma::sp_mat coremat);
RcppExport SEXP _lefko3_spmat_log(SEXP corematSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type coremat(corematSEXP);
    rcpp_result_gen = Rcpp::wrap(spmat_log(coremat));
    return rcpp_result_gen;
END_RCPP
}
// turbogeodiesel
List turbogeodiesel(DataFrame loy, List Umats, List Fmats, DataFrame hstages, DataFrame agestages, DataFrame stages, bool patchmats, bool popmats);
RcppExport SEXP _lefko3_turbogeodiesel(SEXP loySEXP, SEXP UmatsSEXP, SEXP FmatsSEXP, SEXP hstagesSEXP, SEXP agestagesSEXP, SEXP stagesSEXP, SEXP patchmatsSEXP, SEXP popmatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type loy(loySEXP);
    Rcpp::traits::input_parameter< List >::type Umats(UmatsSEXP);
    Rcpp::traits::input_parameter< List >::type Fmats(FmatsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type hstages(hstagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type agestages(agestagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type stages(stagesSEXP);
    Rcpp::traits::input_parameter< bool >::type patchmats(patchmatsSEXP);
    Rcpp::traits::input_parameter< bool >::type popmats(popmatsSEXP);
    rcpp_result_gen = Rcpp::wrap(turbogeodiesel(loy, Umats, Fmats, hstages, agestages, stages, patchmats, popmats));
    return rcpp_result_gen;
END_RCPP
}
// geodiesel
List geodiesel(DataFrame loy, List Umats, List Fmats, DataFrame agestages, DataFrame stages, bool patchmats, bool popmats);
RcppExport SEXP _lefko3_geodiesel(SEXP loySEXP, SEXP UmatsSEXP, SEXP FmatsSEXP, SEXP agestagesSEXP, SEXP stagesSEXP, SEXP patchmatsSEXP, SEXP popmatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type loy(loySEXP);
    Rcpp::traits::input_parameter< List >::type Umats(UmatsSEXP);
    Rcpp::traits::input_parameter< List >::type Fmats(FmatsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type agestages(agestagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type stages(stagesSEXP);
    Rcpp::traits::input_parameter< bool >::type patchmats(patchmatsSEXP);
    Rcpp::traits::input_parameter< bool >::type popmats(popmatsSEXP);
    rcpp_result_gen = Rcpp::wrap(geodiesel(loy, Umats, Fmats, agestages, stages, patchmats, popmats));
    return rcpp_result_gen;
END_RCPP
}
// decomp3
List decomp3(arma::mat Amat);
RcppExport SEXP _lefko3_decomp3(SEXP AmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    rcpp_result_gen = Rcpp::wrap(decomp3(Amat));
    return rcpp_result_gen;
END_RCPP
}
// decomp3sp
List decomp3sp(arma::mat Amat);
RcppExport SEXP _lefko3_decomp3sp(SEXP AmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    rcpp_result_gen = Rcpp::wrap(decomp3sp(Amat));
    return rcpp_result_gen;
END_RCPP
}
// decomp3sp_inp
List decomp3sp_inp(arma::sp_mat spAmat);
RcppExport SEXP _lefko3_decomp3sp_inp(SEXP spAmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type spAmat(spAmatSEXP);
    rcpp_result_gen = Rcpp::wrap(decomp3sp_inp(spAmat));
    return rcpp_result_gen;
END_RCPP
}
// lambda3matrix
double lambda3matrix(arma::mat Amat, bool sparse);
RcppExport SEXP _lefko3_lambda3matrix(SEXP AmatSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda3matrix(Amat, sparse));
    return rcpp_result_gen;
END_RCPP
}
// ss3matrix
arma::vec ss3matrix(arma::mat Amat, bool sparse);
RcppExport SEXP _lefko3_ss3matrix(SEXP AmatSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ss3matrix(Amat, sparse));
    return rcpp_result_gen;
END_RCPP
}
// rv3matrix
arma::vec rv3matrix(arma::mat Amat, bool sparse);
RcppExport SEXP _lefko3_rv3matrix(SEXP AmatSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(rv3matrix(Amat, sparse));
    return rcpp_result_gen;
END_RCPP
}
// sens3matrix
arma::mat sens3matrix(arma::mat Amat, bool sparse);
RcppExport SEXP _lefko3_sens3matrix(SEXP AmatSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(sens3matrix(Amat, sparse));
    return rcpp_result_gen;
END_RCPP
}
// sens3sp_matrix
arma::sp_mat sens3sp_matrix(arma::sp_mat Aspmat, arma::sp_mat refmat);
RcppExport SEXP _lefko3_sens3sp_matrix(SEXP AspmatSEXP, SEXP refmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type Aspmat(AspmatSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type refmat(refmatSEXP);
    rcpp_result_gen = Rcpp::wrap(sens3sp_matrix(Aspmat, refmat));
    return rcpp_result_gen;
END_RCPP
}
// sens3hlefko
List sens3hlefko(arma::mat Amat, DataFrame ahstages, DataFrame hstages);
RcppExport SEXP _lefko3_sens3hlefko(SEXP AmatSEXP, SEXP ahstagesSEXP, SEXP hstagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ahstages(ahstagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type hstages(hstagesSEXP);
    rcpp_result_gen = Rcpp::wrap(sens3hlefko(Amat, ahstages, hstages));
    return rcpp_result_gen;
END_RCPP
}
// elas3matrix
arma::mat elas3matrix(arma::mat Amat, bool sparse);
RcppExport SEXP _lefko3_elas3matrix(SEXP AmatSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(elas3matrix(Amat, sparse));
    return rcpp_result_gen;
END_RCPP
}
// elas3hlefko
List elas3hlefko(arma::mat Amat, DataFrame ahstages, DataFrame hstages);
RcppExport SEXP _lefko3_elas3hlefko(SEXP AmatSEXP, SEXP ahstagesSEXP, SEXP hstagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ahstages(ahstagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type hstages(hstagesSEXP);
    rcpp_result_gen = Rcpp::wrap(elas3hlefko(Amat, ahstages, hstages));
    return rcpp_result_gen;
END_RCPP
}
// proj3
arma::mat proj3(arma::vec start_vec, List core_list, arma::uvec mat_order, bool standardize, bool growthonly, bool integeronly);
RcppExport SEXP _lefko3_proj3(SEXP start_vecSEXP, SEXP core_listSEXP, SEXP mat_orderSEXP, SEXP standardizeSEXP, SEXP growthonlySEXP, SEXP integeronlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< List >::type core_list(core_listSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mat_order(mat_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< bool >::type growthonly(growthonlySEXP);
    Rcpp::traits::input_parameter< bool >::type integeronly(integeronlySEXP);
    rcpp_result_gen = Rcpp::wrap(proj3(start_vec, core_list, mat_order, standardize, growthonly, integeronly));
    return rcpp_result_gen;
END_RCPP
}
// proj3sp
arma::mat proj3sp(arma::vec start_vec, List core_list, arma::uvec mat_order, bool standardize, bool growthonly, bool integeronly);
RcppExport SEXP _lefko3_proj3sp(SEXP start_vecSEXP, SEXP core_listSEXP, SEXP mat_orderSEXP, SEXP standardizeSEXP, SEXP growthonlySEXP, SEXP integeronlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< List >::type core_list(core_listSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mat_order(mat_orderSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< bool >::type growthonly(growthonlySEXP);
    Rcpp::traits::input_parameter< bool >::type integeronly(integeronlySEXP);
    rcpp_result_gen = Rcpp::wrap(proj3sp(start_vec, core_list, mat_order, standardize, growthonly, integeronly));
    return rcpp_result_gen;
END_RCPP
}
// projection3
Rcpp::List projection3(List mpm, int times, bool stochastic, bool standardize, bool growthonly, bool integeronly, Nullable<NumericVector> start_vec, Nullable<NumericVector> tweights);
RcppExport SEXP _lefko3_projection3(SEXP mpmSEXP, SEXP timesSEXP, SEXP stochasticSEXP, SEXP standardizeSEXP, SEXP growthonlySEXP, SEXP integeronlySEXP, SEXP start_vecSEXP, SEXP tweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mpm(mpmSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< bool >::type stochastic(stochasticSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< bool >::type growthonly(growthonlySEXP);
    Rcpp::traits::input_parameter< bool >::type integeronly(integeronlySEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type tweights(tweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(projection3(mpm, times, stochastic, standardize, growthonly, integeronly, start_vec, tweights));
    return rcpp_result_gen;
END_RCPP
}
// slambda3
DataFrame slambda3(List mpm, int times, Nullable<NumericVector> tweights);
RcppExport SEXP _lefko3_slambda3(SEXP mpmSEXP, SEXP timesSEXP, SEXP tweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mpm(mpmSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type tweights(tweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(slambda3(mpm, times, tweights));
    return rcpp_result_gen;
END_RCPP
}
// stoch_senselas
Rcpp::List stoch_senselas(List mpm, int times, int style, Nullable<NumericVector> tweights);
RcppExport SEXP _lefko3_stoch_senselas(SEXP mpmSEXP, SEXP timesSEXP, SEXP styleSEXP, SEXP tweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mpm(mpmSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< int >::type style(styleSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type tweights(tweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(stoch_senselas(mpm, times, style, tweights));
    return rcpp_result_gen;
END_RCPP
}
// bambi3
DataFrame bambi3(DataFrame stages, DataFrame hstages);
RcppExport SEXP _lefko3_bambi3(SEXP stagesSEXP, SEXP hstagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type stages(stagesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type hstages(hstagesSEXP);
    rcpp_result_gen = Rcpp::wrap(bambi3(stages, hstages));
    return rcpp_result_gen;
END_RCPP
}
// bambi2
DataFrame bambi2(DataFrame stages);
RcppExport SEXP _lefko3_bambi2(SEXP stagesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type stages(stagesSEXP);
    rcpp_result_gen = Rcpp::wrap(bambi2(stages));
    return rcpp_result_gen;
END_RCPP
}
// demolition3
List demolition3(arma::mat e_amat, DataFrame bambesque, Nullable<Rcpp::NumericVector> amat_, Nullable<Rcpp::NumericVector> fmat_);
RcppExport SEXP _lefko3_demolition3(SEXP e_amatSEXP, SEXP bambesqueSEXP, SEXP amat_SEXP, SEXP fmat_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type e_amat(e_amatSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type bambesque(bambesqueSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::NumericVector> >::type amat_(amat_SEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::NumericVector> >::type fmat_(fmat_SEXP);
    rcpp_result_gen = Rcpp::wrap(demolition3(e_amat, bambesque, amat_, fmat_));
    return rcpp_result_gen;
END_RCPP
}
// ltre3matrix
arma::cube ltre3matrix(List Amats, Rcpp::IntegerVector refnum, Nullable<Rcpp::List> refmats_, bool mean, bool sparse);
RcppExport SEXP _lefko3_ltre3matrix(SEXP AmatsSEXP, SEXP refnumSEXP, SEXP refmats_SEXP, SEXP meanSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Amats(AmatsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type refnum(refnumSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::List> >::type refmats_(refmats_SEXP);
    Rcpp::traits::input_parameter< bool >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(ltre3matrix(Amats, refnum, refmats_, mean, sparse));
    return rcpp_result_gen;
END_RCPP
}
// sltre3matrix
Rcpp::List sltre3matrix(List Amats, DataFrame loy, Rcpp::IntegerVector refnum, Nullable<Rcpp::List> refmats_, Nullable<arma::vec> tweights_, int steps, int burnin, bool sparse);
RcppExport SEXP _lefko3_sltre3matrix(SEXP AmatsSEXP, SEXP loySEXP, SEXP refnumSEXP, SEXP refmats_SEXP, SEXP tweights_SEXP, SEXP stepsSEXP, SEXP burninSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Amats(AmatsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type loy(loySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type refnum(refnumSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::List> >::type refmats_(refmats_SEXP);
    Rcpp::traits::input_parameter< Nullable<arma::vec> >::type tweights_(tweights_SEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(sltre3matrix(Amats, loy, refnum, refmats_, tweights_, steps, burnin, sparse));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lefko3_ovreplace", (DL_FUNC) &_lefko3_ovreplace, 7},
    {"_lefko3_pfj", (DL_FUNC) &_lefko3_pfj, 38},
    {"_lefko3_jpf", (DL_FUNC) &_lefko3_jpf, 50},
    {"_lefko3_theoldpizzle", (DL_FUNC) &_lefko3_theoldpizzle, 7},
    {"_lefko3_hoffmannofstuttgart", (DL_FUNC) &_lefko3_hoffmannofstuttgart, 4},
    {"_lefko3_cond_hmpm", (DL_FUNC) &_lefko3_cond_hmpm, 3},
    {"_lefko3_specialpatrolgroup", (DL_FUNC) &_lefko3_specialpatrolgroup, 6},
    {"_lefko3_normalpatrolgroup", (DL_FUNC) &_lefko3_normalpatrolgroup, 4},
    {"_lefko3_jerzeibalowski", (DL_FUNC) &_lefko3_jerzeibalowski, 35},
    {"_lefko3_stovokor", (DL_FUNC) &_lefko3_stovokor, 25},
    {"_lefko3_flagrantcrap", (DL_FUNC) &_lefko3_flagrantcrap, 2},
    {"_lefko3_moreflagrantcrap", (DL_FUNC) &_lefko3_moreflagrantcrap, 1},
    {"_lefko3_spmat_log", (DL_FUNC) &_lefko3_spmat_log, 1},
    {"_lefko3_turbogeodiesel", (DL_FUNC) &_lefko3_turbogeodiesel, 8},
    {"_lefko3_geodiesel", (DL_FUNC) &_lefko3_geodiesel, 7},
    {"_lefko3_decomp3", (DL_FUNC) &_lefko3_decomp3, 1},
    {"_lefko3_decomp3sp", (DL_FUNC) &_lefko3_decomp3sp, 1},
    {"_lefko3_decomp3sp_inp", (DL_FUNC) &_lefko3_decomp3sp_inp, 1},
    {"_lefko3_lambda3matrix", (DL_FUNC) &_lefko3_lambda3matrix, 2},
    {"_lefko3_ss3matrix", (DL_FUNC) &_lefko3_ss3matrix, 2},
    {"_lefko3_rv3matrix", (DL_FUNC) &_lefko3_rv3matrix, 2},
    {"_lefko3_sens3matrix", (DL_FUNC) &_lefko3_sens3matrix, 2},
    {"_lefko3_sens3sp_matrix", (DL_FUNC) &_lefko3_sens3sp_matrix, 2},
    {"_lefko3_sens3hlefko", (DL_FUNC) &_lefko3_sens3hlefko, 3},
    {"_lefko3_elas3matrix", (DL_FUNC) &_lefko3_elas3matrix, 2},
    {"_lefko3_elas3hlefko", (DL_FUNC) &_lefko3_elas3hlefko, 3},
    {"_lefko3_proj3", (DL_FUNC) &_lefko3_proj3, 6},
    {"_lefko3_proj3sp", (DL_FUNC) &_lefko3_proj3sp, 6},
    {"_lefko3_projection3", (DL_FUNC) &_lefko3_projection3, 8},
    {"_lefko3_slambda3", (DL_FUNC) &_lefko3_slambda3, 3},
    {"_lefko3_stoch_senselas", (DL_FUNC) &_lefko3_stoch_senselas, 4},
    {"_lefko3_bambi3", (DL_FUNC) &_lefko3_bambi3, 2},
    {"_lefko3_bambi2", (DL_FUNC) &_lefko3_bambi2, 1},
    {"_lefko3_demolition3", (DL_FUNC) &_lefko3_demolition3, 4},
    {"_lefko3_ltre3matrix", (DL_FUNC) &_lefko3_ltre3matrix, 5},
    {"_lefko3_sltre3matrix", (DL_FUNC) &_lefko3_sltre3matrix, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_lefko3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
